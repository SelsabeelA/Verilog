// COMPONENTS USED: 4-to-1 Multiplexer, Full Adder, XOR
// NUMBER OF COMPONENTS: 6 4-to-1 multiplexers + 3 Full adders + 3 XORs = 12 components in total



module multiplexer_4to1 ( // declaration of the 4-1 multiplexer that selects between 4 inputs based on the selector's value
  input wire I0, I1, I2, I3,   // 1-bit data inputs I0, I1, I2, I3 as in figure 2-4 from the book
  input wire S0, S1,          // 2-bit select input that are the selectors of the multiplexer
  output wire Y               // Output result stored in a bit, Y
);

  wire w0, w1, w2, w3; // these wires will be used as the connections that give the same output as
// a multiplexer when ORed

  // AND gates to generate product terms
  assign w0 = I0 & ~S1 & ~S0; // the first wire is (I0 and NOT S1 and NOT S0)
  assign w1 = I1 & ~S1 & S0; // the second wire is (I1 and NOT S1 and S0)
  assign w2 = I2 & S1 & ~S0; // the third wire is (I2 and S1 and NOT S0)
  assign w3 = I3 & S1 & S0; // the fourth wire is (I3 and S1 and S0)

  // OR gate to combine product terms
  assign Y = w0 | w1 | w2 | w3; // the output is OR's between all of these wires

endmodule // signifies the end of the multiplexer module

module full_adder (
  input wire A, B, Cin,  //1-bit data inputs
  output wire Sum, Cout  //Output result
);

  wire X1, X2, X3, X4, X5;

  // XOR gates for the sum bits
  assign X1 = A ^ B;
  assign Sum = X1 ^ Cin;

  // AND gates for the carry bits
  assign X2 = A & B;
  assign X3 = X1 & Cin;
  assign X4 = A & Cin;
  assign X5 = B & Cin;

  // OR gate to combine carry bits
  assign Cout = X2 | X3 | X4 | X5;

endmodule

module main;
  reg b0, b1, b2, a0, a1, a2;  // 1-bit values, b2b1b0 represents B, a2a1a0 represents A
  reg S0, S1; // S0 and S1 represent the selectors
  wire Y1, Y2, Y3, Y4, Y5, Y6; // the outputs of the 6 multiplexers 
  wire XOR1, XOR2, XOR3; //the outputs of the 3 XORS
  wire sum1, cout1, sum2, cout2, sum3, cout3; // the outputs of the 3 Full Adders

  multiplexer_4to1 first (
    a0,   // I0
    a0,   // I1
    a0,   // I2
    b0,   // I3
    S0,   // S0
    S1,   // S1
    Y1     // Output Y
  );

  multiplexer_4to1 second ( // this is the second 4-1 multiplexer out of our six multiplexers
// it selects between the 0, B0, B0, and 0 (1 as in the logic gate bit 1 that is constant)
    1'b1,   // I0 note: 1'b1 in verilog means the bit 1 represented in 1 bit
    b0,   // I1
    b0,   // I2
    1'b1,   // I3 note: 1'b1 in verilog means the bit 1 represented in 1 bit
    S0,   // S0
    S1,   // S1
    Y2     // Output Y
  );

  multiplexer_4to1 third (
    a1,   // I0
    a1,   // I1
    a1,   // I2
    b1,   // I3
    S0,   // S0
    S1,   // S1
    Y3     // Output Y
  );

  multiplexer_4to1 fourth ( // this is the fourth 4-1 multiplexer out of our six multiplexers
// it selects between the 0, B1, B1, and 1 (0 as in the logic gate bit 0 that is constant)
    1'b0,   // I0 note: 1'b0 in verilog means the bit 0 represented in 1 bit
    b1,   // I1
    b1,   // I2
    1'b0,   // I3 note: 1'b0 in verilog means the bit 0 represented in 1 bit
    S0,   // S0
    S1,   // S1
    Y4     // Output Y
  );

  multiplexer_4to1 fifth (
    a2,   // I0
    a2,   // I1
    a2,   // I2
    b2,   // I3
    S0,   // S0
    S1,   // S1
    Y5     // Output Y
  );

  multiplexer_4to1 sixth ( // this is the sixth 4-1 multiplexer out of our six multiplexers
// it selects between the 0, B2, B2, and 0 (0 as in the logic gate bit 0 that is constant)
    1'b0,   // I0 note: 1'b0 in verilog means the bit 0 represented in 1 bit
    b2,   // I1
    b2,   // I2
    1'b0,   // I3 note: 1'b0 in verilog means the bit 0 represented in 1 bit
    S0,   // S0
    S1,   // S1
    Y6     // Output Y
  );

// XOR gates (XORing with S0 to get the complement values in the last 2 cases only where S0 = 1)
  assign XOR1 = S0 ^ Y1;
  assign XOR2 = S0 ^ Y3;
  assign XOR3 = S0 ^ Y5;

// Full adders
  full_adder fa1 (
    .A(XOR1),   //A0
    .B(Y2),     //B0
    .Cin(S0),   //Cin0
    .Sum(sum1), //Sum0
    .Cout(cout1)  //Cout0
  );

  full_adder fa2 (
    .A(XOR2),   //A1
    .B(Y4),     //B1
    .Cin(cout1),  //Cin1
    .Sum(sum2),     //Sum1
    .Cout(cout2)    //Cout1
    );
  
  full_adder fa3 (
    .A(XOR3),   //A2
    .B(Y6),     //B2
    .Cin(cout2),  //Cin2
    .Sum(sum3),    //Sum2 
    .Cout(cout3)    //Cout2
  );
  
  initial begin
  $monitor($time, " a=%b%b%b, b=%b%b%b, S=%b%b, G=%b%b%b",
    a2, a1, a0, b2, b1, b0, S0, S1, sum3, sum2, sum1
  );


  #0  a0=0; a1=1; a2=0; b0=1; b1=1; b2=0; S0=0; S1=0;   // A = 2, B = 3 result = 011 TC:1
  #10 a0=0; a1=1; a2=0; b0=1; b1=1; b2=0; S0=0; S1=1;   // A = 2, B = 3 result = 101 TC:2
  #20 a0=0; a1=1; a2=0; b0=1; b1=1; b2=0; S0=1; S1=0;   // A = 2, B = 3 result = 001 TC:3
  #30 a0=0; a1=1; a2=0; b0=1; b1=1; b2=0; S0=1; S1=1;   // A = 2, B = 3 result = 110 TC:4

//FIRST CASE: A + 1
  #40 a0=0; a1=1; a2=0; b0=1; b1=1; b2=0; S0=0; S1=0;   // A[+ve] A = 1 , B = 3 TC:5
  #50 a0=1; a1=1; a2=1; b0=1; b1=1; b2=0; S0=0; S1=0;   // A[-ve] A = -1, B = 3 TC:6
  #60 a0=0; a1=0; a2=0; b0=1; b1=1; b2=0; S0=0; S1=0;   // A[ZERO] A = 0, B = 3 TC:7
  #70 a0=0; a1=1; a2=0; b0=1; b1=0; b2=0; S0=0; S1=0;   // A[+ve] A = 2 , B = 1 result = 011 TC:8
  #80 a0=1; a1=1; a2=0; b0=1; b1=0; b2=0; S0=0; S1=0;   // A[+ve] A = 3 , B = 1 result = 100 TC:9


//SECOND CASE: A + B
  #90 a0=0; a1=1; a2=0; b0=0; b1=1; b2=0; S0=0; S1=1;   // A[+ve], B[+ve] A = 2, B = 2 result = 100 TC:10
  #100 a0=1; a1=0; a2=0; b0=1; b1=0; b2=0; S0=0; S1=1;   // A[+ve], B[+ve] A = 1, B = 1 result = 010 TC:11
  #110 a0=0; a1=1; a2=0; b0=1; b1=1; b2=1; S0=0; S1=1;   // A[+ve], B[-ve] A = 2, B = -1 result = 001 TC:12
  #120 a0=0; a1=1; a2=0; b0=0; b1=1; b2=1; S0=0; S1=1;   // A[+ve], B[-ve] A = 2, B = -2 result = 000 TC:13
  #130 a0=0; a1=1; a2=0; b0=1; b1=0; b2=1; S0=0; S1=1;   // A[+ve], B[-ve] A = 2, B = -3 result = 111 TC:14
  #140 a0=1; a1=1; a2=0; b0=1; b1=1; b2=1; S0=0; S1=1;   // A[+ve], B[-ve] A = 3, B = -1 result = 010 TC:15
  #150 a0=1; a1=1; a2=0; b0=0; b1=1; b2=1; S0=0; S1=1;   // A[+ve], B[-ve] A = 3, B = -2 result = 001 TC:16
  #160 a0=1; a1=1; a2=0; b0=1; b1=0; b2=1; S0=0; S1=1;   // A[+ve], B[-ve] A = 3, B = -3 result = 000 TC:17
  #170 a0=1; a1=0; a2=1; b0=1; b1=0; b2=0; S0=0; S1=1;   // A[-ve], B[+ve] A = -3, B = 1 result = 110 TC:18
  #180 a0=1; a1=0; a2=1; b0=0; b1=1; b2=0; S0=0; S1=1;   // A[-ve], B[+ve] A = -3, B = 2 result = 111 TC:19
  #190 a0=0; a1=1; a2=1; b0=1; b1=1; b2=0; S0=0; S1=1;   // A[-ve], B[+ve] A = -2, B = 3 result = 001 TC:20
  #200 a0=1; a1=0; a2=1; b0=1; b1=1; b2=1; S0=0; S1=1;  // A[-ve], B[-ve] A = -3, B = -1 result = 100 TC:21
  #210 a0=1; a1=1; a2=1; b0=0; b1=1; b2=1; S0=0; S1=1;  // A[-ve], B[-ve] A = -1, B = -2 result = 101 TC:22
  #210 a0=1; a1=1; a2=1; b0=1; b1=1; b2=1; S0=0; S1=1;  // A[-ve], B[-ve] A = -1, B = -1 result = 110 TC:23

//THIRD CASE: B - A
  #110 a0=0; a1=0; a2=0; b0=1; b1=1; b2=0; S0=1; S1=0;  // B[+ve] > A[ZERO] A = 0, B = 3 result = 011 TC:24 
  #120 a0=1; a1=0; a2=0; b0=1; b1=1; b2=0; S0=1; S1=0;  // B[+ve] > A[+ve] A = 1, B = 3 result = 010 TC:25
  #130 a0=1; a1=1; a2=0; b0=1; b1=0; b2=0; S0=1; S1=0;  // B[+ve] < A[+ve] A = 3, B = 1 result = 110 TC:26
  #140 a0=0; a1=1; a2=0; b0=1; b1=0; b2=0; S0=1; S1=0;  // B[+ve] < A[+ve] A = 2, B = 1 result = 111 TC:27
  #150 a0=1; a1=1; a2=1; b0=0; b1=1; b2=0; S0=1; S1=0;  // B[+ve], A[-ve] A = -1, B = 2 result = 011 TC:28
  #110 a0=1; a1=1; a2=1; b0=1; b1=1; b2=0; S0=1; S1=0;  // B[+ve], A[-ve] A = -1, B = 3 result = 100 TC:29
  #160 a0=1; a1=0; a2=0; b0=1; b1=1; b2=1; S0=1; S1=0;  // B[-ve], A[+ve] A = 1, B = -1 result = 110 TC:30
  #160 a0=1; a1=0; a2=0; b0=1; b1=0; b2=1; S0=1; S1=0;  // B[-ve], A[+ve] A = 1, B = -3 result = 100 TC:31
  #170 a0=1; a1=1; a2=1; b0=0; b1=1; b2=1; S0=1; S1=0;  // B[-ve], A[-ve] A = -1, B = -2 result = 111 TC:32
  #170 a0=1; a1=0; a2=1; b0=1; b1=1; b2=1; S0=1; S1=0;  // B[-ve], A[-ve] A = -3, B = -1 result = 010 TC:33


//FORTH CASE: 1 - B
  #160 a0=0; a1=0; a2=0; b0=0; b1=1; b2=0; S0=1; S1=1;  // B[+ve] A = 0, B = 2 result = 111 TC:34
  #160 a0=1; a1=0; a2=0; b0=1; b1=1; b2=0; S0=1; S1=1;  // B[+ve] A = 1, B = 3 result = 110 TC:35
  #160 a0=1; a1=1; a2=1; b0=1; b1=0; b2=0; S0=1; S1=1;  // B[+ve] A = -1, B = 1 result = 000 TC:36
  #170 a0=0; a1=0; a2=0; b0=1; b1=1; b2=1; S0=1; S1=1;  // B[-ve] A = 0, B = -1 result = 010 TC:37
  #180 a0=0; a1=0; a2=0; b0=0; b1=1; b2=1; S0=1; S1=1;  // B[-ve] A = 0, B = -2 result = 011 TC:38
  #190 a0=0; a1=0; a2=0; b0=1; b1=0; b2=1; S0=1; S1=1;  // B[-ve] A = 0, B = -3 result = 100 TC:39
  #200 a0=0; a1=0; a2=0; b0=0; b1=0; b2=0; S0=1; S1=1;  // B[ZERO] A = 0, B = 0 result = 001 TC:40

  #210 $finish; // Add a finish statement to end the simulation
  end

endmodule
